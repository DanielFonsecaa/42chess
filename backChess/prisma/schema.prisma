// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "generate"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  String @id @default(uuid())
  name String
  password String
  email String
  intra String?
  img String?
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  participants TournamentParticipant[]
}

model Tournament {
  id String @id @default(uuid())
  name String
  timeGame Int @default(5)
  createdAt DateTime @default(now())
  startedAt DateTime
  endedAt DateTime?
  winnerId String?
  participants TournamentParticipant[]
  matches Match[]
}

model TournamentParticipant {
  id  String @id @default(uuid())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String @default("1")
  user User @relation(fields: [userId], references: [id])
  userId String
  byeCount Int @default(0)
  matchesAsA Match[] @relation("playerA")
  matchesAsB Match[] @relation("playerB")
  createdAt DateTime @default(now())

  @@unique([tournamentId, userId])         // prevent duplicate joins
  @@index([tournamentId])                  // quick lookup by tournament
}
model Match {
  id  String @id @default(uuid())
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  round Int
  playerA TournamentParticipant @relation("playerA", fields: [playerAId], references: [id])
  playerAId String
  playerB TournamentParticipant? @relation("playerB", fields: [playerBId], references: [id])
  playerBId String?
  scoreA Float @default(0)
  scoreB Float @default(0)
  createdAt DateTime @default(now())

  @@index([tournamentId, round])
}